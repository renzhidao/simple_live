plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

// 修复：安全读取签名配置
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
def hasKeystore = false
if (keystorePropertiesFile.exists()) {
    try {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        // 检查必要的属性是否存在
        hasKeystore = keystoreProperties['keyAlias'] != null && 
                     keystoreProperties['keyPassword'] != null && 
                     keystoreProperties['storeFile'] != null && 
                     keystoreProperties['storePassword'] != null
    } catch (Exception e) {
        println "Warning: Could not load keystore properties: ${e.message}"
        hasKeystore = false
    }
}

android {
    namespace = "com.xycz.simple_live"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.xycz.simple_live"
        minSdk = flutter.minSdkVersion
        multiDexEnabled true
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }
    
    packagingOptions {
        pickFirst 'lib/**/libc++_shared.so'
    }
    
    // 修复：只在有有效密钥文件时才配置签名
    signingConfigs {
        if (hasKeystore) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }

    // 修复：移除重复的 buildTypes 声明
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            // debug 使用默认签名，不需要 release 签名
        }
        
        profile {
            // profile 也使用默认签名，除非有自定义需求
            if (hasKeystore) {
                signingConfig signingConfigs.release
            }
        }
        
        release {
            // 只在有签名配置时才使用
            if (hasKeystore) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}